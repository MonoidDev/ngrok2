// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x95\xc7\x0e\xb3\x5a\x12\x84\xf7\x3c\xc5\xec\xd1\x88\x8c\xed\xe5\x81\x43\xe6\x90\x0d\x86\x1d\xc9\xe4\x6c\x0c\xe6\xe9\x47\xf7\xbf\xd2\x68\x74\xa7\x97\x5f\x49\xa5\x56\xab\x4b\xf5\xef\xbf\x46\x90\x14\xcd\xfa\x97\x28\x79\x81\x26\x6b\x22\x08\xa4\x3f\x14\x43\x9a\x26\x43\x28\x8a\xe0\xeb\x8a\xc0\x95\x0e\xe8\xc6\xba\x31\x25\x5a\xfd\xcd\x2d\xe0\x4a\xb2\xe0\x82\x23\x80\x92\x89\x40\xa7\x00\xea\x29\x09\x35\x12\xc3\x10\x9d\xd2\x05\x3c\xa1\xb2\x42\x4c\x00\x55\x20\x76\x56\x9d\x29\xfd\x90\x31\xfa\x9e\x46\xd2\x29\xb5\xc0\xfd\x4b\x14\xc0\x14\x88\x11\x37\xe6\xc3\x63\x35\x07\xeb\x9b\x05\xd2\x13\x09\xda\x1f\x23\x70\xba\xa6\xd1\x70\x3b\x96\x30\xfa\x37\xfd\x71\x6d\x46\x93\x87\x5a\xe7\x16\x0a\xd0\x61\xb5\xe0\x42\xd0\xfd\xa1\x0b\x1c\xd1\x5f\xac\xfd\xc3\xce\xff\xb2\x56\x40\xc8\xdd\x0e\xd1\x8d\x21\x16\xba\xae\x22\x1d\x7a\xf8\xbc\xa4\x00\x09\xd2\x1f\x77\x51\x40\x86\x4b\xcb\x5b\x1a\x25\xdf\x7c\xe0\xe6\x38\x90\x7c\x24\x80\xbf\xb5\x1a\xe9\xd9\x50\xfc\x32\x7a\xdb\x63\xfa\xf1\xc1\x90\xe7\x1e\x52\x15\xc3\xd0\x75\xa1\x0c\xb6\xc5\x1c\xfe\x77\x65\x51\x04\x8d\xf6\xcf\xbb\x08\x82\x0b\x60\x55\x69\x0e\x80\xa2\x88\x81\x6a\x12\xab\x4a\x13\x80\x35\xed\x2f\x91\x3f\xf4\x34\x77\x34\x39\x96\x1a\x43\x53\x94\xba\x6f\xfc\xfa\xdc\x7e\xd4\x9d\x32\x75\x92\x67\x93\x00\x32\xc0\x43\x41\xf3\xb0\x2d\x7b\xf3\x3a\xf5\x15\x60\x13\x22\xc5\x90\x4a\x2c\x38\x36\xce\xcc\xe8\x9a\xd9\x28\x26\x47\xcb\xce\x4c\xd6\x85\x5e\x56\x2e\x3e\x5f\x17\x51\xc1\xf6\x45\xd6\x0f\x24\x46\xe5\x89\xd8\x6d\x31\xe7\x98\x0c\xde\xd2\xd2\x3d\x7a\x4c\x8d\x0c\x47\xaf\x70\x1b\x1a\xf7\x23\xa5\x88\x63\x77\x6d\x03\xc7\x07\xe2\x15\x33\x47\x9e\x25\x95\xd9\xd2\x8c\xa4\xe6\xca\x2f\xeb\x89\x53\xd1\xbb\xb4\x4c\x17\xc5\xfa\xae\xfa\x44\xb0\x5e\xe5\x9b\x18\xd1\x06\xf3\x4c\x16\x30\x32\x9e\x83\x21\xcc\x81\xca\x3a\x3b\xe4\xb3\xae\xbf\x2f\x86\x0b\x1c\xaa\xdc\x7b\x3e\xf1\x71\x65\x25\xfa\x5e\x8e\xf5\x68\x39\xaa\x82\xf1\x21\x13\xd5\x04\x4f\xc5\xec\x88\xf1\x1b\xdc\xb7\x72\xa0\x2d\xb7\xff\x8c\xbd\x7c\x94\x5c\xe8\x53\xe6\x7b\x9a\xc3\x8f\xcd\x94\xb4\xc5\xbd\xbf\xa5\xf4\x2c\xb2\x8a\x8e\xe1\x76\x2b\xbf\x56\x1c\x1a\x38\xd5\x90\x5d\x3b\x91\x05\x64\x20\xf6\xc9\x86\xba\xa4\x18\xdb\x25\xb2\x74\x7f\x9f\xb9\x9a\x53\x67\xfb\x51\x36\x9d\xbb\x1d\xdb\x7d\x2c\x1d\x93\x2d\x27\xfc\x2b\xef\x90\x73\xdb\xfc\x21\xf9\xef\x6b\x1f\xfd\x72\x20\x6b\x91\x03\x7a\x25\x63\xeb\x16\x5d\x5a\xbc\xad\xb7\xe7\xd6\xec\x86\xc2\x56\x6e\x01\xa9\x9b\x89\xc3\xa9\x0a\xc5\xc5\xcb\x8b\xf8\xb5\x57\xab\x23\xe9\xb6\xd5\xdc\x63\x85\x29\x3d\xcf\x21\xdc\x47\xd7\xbf\x58\x27\xfa\xdd\x6c\x2c\x69\x6f\xc6\x8b\x38\x85\xf5\xeb\x73\x4a\x09\xad\x65\x85\xe1\xe6\x98\x64\x44\xb3\xb2\x4e\x10\xfe\xbe\xdd\x04\x5f\x26\xdf\x39\x07\xfd\x78\xf9\x40\x36\xa9\xde\x94\xe2\x35\x24\x7e\xfa\x29\x33\x3c\x30\x50\xe9\x47\x64\xab\x03\xdf\x88\xe4\xa0\x1e\x45\x31\x5d\x8e\x59\xe0\xa2\x43\xa0\x9b\x13\x5f\x8e\x07\x9b\x28\x26\xca\x7a\x12\xe5\x66\xf1\x40\xd5\xc7\x36\x39\xd4\xc6\x4f\xff\x4e\x81\xdd\x2e\x3c\x16\x08\x71\x3c\x13\x77\x33\xcf\x96\xf7\xf2\xec\x34\x1e\xfa\x63\x42\xbf\xad\xe2\x65\xc0\x5f\xb3\x22\xdf\x0e\x58\x83\xda\x2b\x0a\xa9\xe9\x72\x9f\xb2\x3d\x37\x97\x13\xe7\xd4\xa6\xe4\x0a\x5e\x34\x3c\xac\x1a\x2d\x8a\xdb\xf4\x43\x31\xb4\x1f\x7d\x7b\x57\xbc\x09\xae\x86\x52\xa2\x5d\xbc\x12\xaa\x53\x97\x76\x77\x6b\x66\x0a\xdf\xbb\x60\x8c\xf2\x7b\x2b\xcc\xe7\x28\x83\x0a\x09\x00\xfc\x1d\x7d\xec\x1f\xd9\x87\x7f\xde\x1a\xa6\x65\x4f\xe3\xbe\x77\x37\x45\xee\xb4\x44\x21\xdf\xd9\x72\x19\x9a\x9e\x21\xa3\x3a\xbb\x2d\xcb\x4a\xf1\x92\xfa\x24\x90\xef\x66\xd8\x38\xc8\xe8\x14\x96\x20\xa5\x85\xbb\x07\x13\x4d\xeb\xb2\x9b\xb9\x77\xea\x7d\xdd\x40\xf1\xbc\x0b\x57\x97\xd3\x3f\xaf\x68\x27\xf0\x96\x10\xca\x75\x40\xbc\xd1\x7c\xec\xe9\x4b\xe3\xf2\x3d\x35\x42\xac\x29\x12\x79\xb6\x9e\x3f\x0f\x37\xb8\xa7\x42\x88\xe3\x27\x17\xbf\xc7\x95\xcc\x2c\x41\x54\xb8\x19\x1a\x8f\xc5\x81\x09\x2d\xe8\x03\x20\x1c\xe4\xf1\xf6\x5c\x7b\x87\x77\x28\xf8\xba\xfb\xe6\x53\x6c\xb0\xdf\x51\xc9\x72\x6d\xf5\x0e\x9a\x9d\x84\x7d\x7c\x37\x79\x20\x5c\x12\xb0\xfa\x60\xce\xc9\x2b\x05\xde\x87\x63\x2e\x2b\xb3\x1a\x35\xa0\xe4\x2a\x70\x88\x87\x49\xa9\xda\xdc\x65\xef\x49\x76\x03\xde\xc3\x66\x81\x08\xe3\xf2\x6e\xe3\xca\xb0\x1e\xa9\xc9\xf4\xb8\x79\x4f\x6d\xf2\xa6\x7b\x08\xdf\x49\xdb\xb0\x9c\xd3\xae\xce\xa8\x92\x6e\xcf\xb1\x6a\xa2\xbd\x7f\xcd\xa3\xa6\x82\x57\x7c\x06\x21\x72\xef\x21\x46\x69\xf1\xfe\xf9\x3e\xb2\x58\x27\xf0\x00\xfc\x1e\xc6\x79\xe5\xac\xcb\x30\x06\xce\x2d\x5f\x9f\xbb\x2b\x22\x68\x6d\x99\x22\xad\x51\xed\x9a\xc0\x75\xb2\xfa\x19\x69\xfe\xd4\xd2\x54\x99\xe8\x54\x9d\x61\x09\x2b\x64\x22\x77\x11\xf1\xfd\xb2\x32\x94\x4e\x24\x10\x65\xd2\x1d\xfa\xf1\xd5\x7f\xc8\x78\xed\xda\x2e\x4f\xdc\x7d\x29\xd7\x6b\x16\xf9\x18\x1d\x0c\xfd\xdd\xca\xc1\x93\x72\x8e\x7b\x3d\x9e\x2e\xc2\x86\x30\x1b\x61\x5a\xb3\xe7\xcf\x41\xf8\xcf\xd2\x2a\x62\x37\xd4\x30\x88\x75\x1e\x67\x83\xcf\x27\x92\x66\x4a\x57\xbc\xd4\xa1\x25\x3b\x5e\xc9\x9f\x52\xb2\x2f\x59\x5e\x0d\xcd\x51\x69\xd8\x83\x19\x61\xa3\xf5\x5e\x3c\x1c\xbd\xcf\x47\x94\xf8\xcc\xc8\xcb\x7b\xe4\x28\xd1\x13\x0a\xbf\x92\x7e\x17\xa7\xdd\x46\x0f\xfd\xc8\x09\x5c\x87\x1e\x23\x6c\x3e\xcf\x99\xfd\xe5\xac\x1b\x2f\xde\x83\xdc\x1a\x47\x88\x49\x45\xa4\xb3\x5d\x1f\x5f\x51\xb7\xfb\xc5\xb3\x09\x29\xe9\x95\x6d\x02\xb5\xf9\x9a\x31\x3c\xf7\x82\x7e\xb3\x5f\x7d\xb7\x97\x5e\xd8\x2a\xff\x4e\x0c\xc1\xd9\x76\x14\xcd\xec\xaf\xd4\x7a\x5c\xa9\xc5\x63\xe0\x91\xa3\xc8\xd5\x68\x94\x4d\x99\x41\xaa\xd2\xda\x75\xa4\xfb\xb3\x82\x4f\x18\x18\xfb\x20\x49\xdd\x44\xe4\x74\xf7\xd9\xc6\x7b\xbf\x16\x7a\x6e\x2c\x62\xe9\x3e\x24\xe3\x98\xf9\x95\x34\x87\xcf\x8c\xfd\x29\x38\xc9\x82\xff\x5f\x7a\xff\x09\x00\x00\xff\xff\x82\xb7\xc1\xb2\x11\x07\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 1809, mode: os.FileMode(436), modTime: time.Unix(1545400924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x97\xb7\x0e\xa4\x00\xb6\x05\x73\xbe\x62\x72\xf4\x84\x77\xc1\x0b\xf0\xde\x7b\xb2\xc6\x37\x9e\xc6\xf3\xf5\xab\x19\x6d\xb8\x37\xbd\x59\x9d\x4a\xea\xff\xfe\x1e\x27\xca\xaa\xf5\xc7\xf3\xd9\x3f\x8e\xa7\x46\x6c\x20\xfe\xd1\xc5\xf4\xdf\x07\x30\x55\x55\xd3\x59\x95\x63\x59\x9d\x67\x1b\x91\x45\xbf\x44\x61\xfc\xd8\x61\xb9\xe8\x26\x6a\x7c\x75\x6e\xd2\x8f\x1c\x6b\xba\x22\xbf\x46\xf2\x86\xdb\x14\xfc\xda\xc1\x74\x0a\x4e\xbc\x6d\x03\xc6\x61\x80\xbc\x65\xb7\x2c\xed\xe6\x75\xb5\x24\xea\x61\xbb\x52\xc1\xa9\xe8\x9b\x43\x4d\xcf\x29\x0d\xc1\xc9\x97\xe0\x81\xe4\x04\x72\x72\x1c\x90\xb5\xad\xda\x57\xe0\x4b\xcb\x28\xf1\xfd\x3e\xf3\x31\x74\x1e\x60\xd1\xfe\x1a\xa0\x61\x99\xce\xf4\x28\xe0\xb8\xf9\x7b\xb9\x5f\x02\xf1\x04\x8b\xff\x28\x32\x67\xca\xae\xe6\xee\x7d\x64\x0f\x27\x2f\xdc\xf2\xca\xb5\x23\x81\xc4\x74\xf4\x16\x62\x9d\x53\x14\xdc\x46\xa0\x83\x5a\x99\x53\x4f\xd0\xb2\xc7\xc9\x83\xad\x74\xf1\xd3\x59\x1e\xcc\xba\x01\x71\x67\x39\xfc\xe4\x99\x17\x96\x85\x22\x92\x4c\x96\xc1\xc0\x3f\x27\x18\x87\x51\x33\x7c\x7e\x3c\x87\x95\xaa\x53\x7e\x00\x05\xfa\x45\xdd\xb7\x5e\x2f\x9b\xbc\xc9\x3c\x45\xf8\x18\xad\xc2\x84\xa3\x86\xc8\x08\x77\xf0\x3b\xc4\x30\x55\x52\x29\x36\x80\x0c\xee\x79\xc8\x21\x64\x8d\xfd\xee\x24\x8d\xb4\xe1\x8f\x8a\x0d\xdf\x07\xec\xce\x83\x9d\xc2\x46\x8e\x8f\x44\x25\x05\x21\x30\xfb\x4a\x40\xd2\x55\xbe\x89\x6c\xc3\x9f\x6b\x9a\x4e\xfe\x7d\x4a\x9c\x3e\x5b\xb2\x23\xe9\x18\x77\x06\xde\x7a\x61\x4f\x83\x6c\xb2\xd4\xc8\xdc\x07\x44\xa3\x67\x47\x36\x3e\xee\xdc\x6c\xbf\xcf\xb9\xfb\x8f\x8e\xcf\xf9\x97\xe3\x60\x27\xd9\x4e\xdc\xfe\x72\xa1\xbe\x48\x37\xd2\x56\x24\xbf\xd1\x6e\x8f\xa3\xc6\xdd\xe4\x25\x21\x89\x10\x23\xa0\x7e\x04\xd4\x0d\x93\x1b\x1b\x31\x3a\xdb\x52\x43\xa2\x7c\x30\x46\x9f\xe1\x26\xba\x6e\x56\x7c\xd1\xa7\x97\xe7\x4d\x38\x41\x8c\x4e\xbe\x9b\xa4\x26\x1e\xf3\xf6\x96\xf6\x5d\x61\xa7\x1d\x39\x28\xcc\x64\x23\x00\x28\x49\xfb\x55\x39\xcc\xb3\x13\x97\xe2\x55\xbe\xaa\x86\x9f\xd6\x1c\x82\x76\x26\xbd\x63\xb8\x0a\xd1\xef\xc6\x74\x26\x23\xda\x5a\xd6\x31\xa4\xdc\xa8\xb1\xbe\x88\x3c\x1f\x35\x94\xff\x11\x7f\xea\x08\x80\xad\x49\xda\xbf\xc5\x94\xda\xef\x04\x5d\xfb\x7d\x2c\xe0\xe2\xbb\xdd\x6c\xe9\xe5\x94\xd1\x08\x52\xcc\x8e\xae\x6f\xb7\x4a\x38\xcd\x2f\x26\x85\xf0\x2a\xd7\xdf\xd3\x1e\xc4\x75\xfc\x14\xaa\xaf\x34\x80\x1a\xb0\x59\x5d\x64\xbe\xc0\x92\xf1\x9a\xd8\x74\xee\x8c\x7c\x07\x85\x79\x13\x6c\x23\xcc\x3e\xb8\x61\x4d\xb1\x5b\xad\x36\xc1\x2b\x55\x1b\x81\xb8\xb8\x16\x11\x78\xc3\xbb\x5f\x84\x3c\x7b\x89\x2c\xc0\xba\x7f\x15\xe6\x72\xd2\x3b\x68\x03\x6e\xf6\x90\x9b\x30\x75\x56\xcc\x1a\x8b\x1d\x1d\xe2\xe9\xca\x68\x83\xf5\xfd\xa5\x6a\x8c\xc5\x52\x7a\xb5\x38\x6a\x6e\xf1\x88\xb1\x95\x8d\x92\x96\xef\xbb\x80\x2d\x7b\x7c\xb2\xd9\x37\xd2\x6a\x39\xd8\x5d\xf0\x9e\x99\x46\x88\xfc\x2c\x3e\xe0\xc6\x67\xe6\xd4\xee\xcb\x91\x1d\x8c\x17\x29\xca\x15\xa0\x01\x43\x75\xcc\xa3\x18\x69\x0b\xe6\x0f\xdb\x34\xc9\x83\x81\x55\xed\x55\x49\x29\x82\xb2\x5e\xa4\x43\x5c\x71\x1f\xb9\x05\x1c\x92\xf7\x30\x0b\xa3\xe1\xa4\x3a\xd8\xd0\x65\x3a\x87\x53\x88\x51\x3a\xd6\x9b\xa8\x35\xbf\x20\x5d\x6b\x2b\xa5\xe2\x5b\x39\x6f\x45\x00\x6f\xfa\x9d\xe0\x3a\xea\x08\x69\xaa\xa5\x3a\x85\xbd\x96\x9e\x84\xca\xe1\x82\xab\x3e\x85\xe1\x1c\x6a\x0e\xdf\x2c\x0d\x88\xd0\x91\x2f\xbd\x81\x0b\x4e\xae\xd4\xa6\x54\x07\xed\x3b\x48\xb9\xee\x31\xc0\xbf\x15\x36\xe8\x5a\x20\x4c\x7a\x6e\x70\x4c\xd7\x0b\x3d\xad\xf2\x88\xda\xe4\x9d\x01\xd7\xa6\x9a\xc0\x17\x2e\xbf\xb0\xe2\x69\x35\x0e\x07\xc4\x77\x96\x8f\xbf\x4b\x41\x52\x38\xf1\xe3\x53\x92\xc0\x45\xba\xe6\x2a\x42\x9a\x55\x6d\x41\x2d\xad\xf7\xea\xbd\x19\x77\x05\x1a\x02\xde\x7d\xd2\xfb\xd2\x28\xb5\x19\x63\x16\xf5\x3d\x8a\xfb\xfc\x7e\x0e\xd8\x50\xc8\x60\xef\xe5\x51\x39\xeb\x71\x22\x21\x40\xa5\xd5\x71\x50\xbd\x47\x91\xed\x30\x52\x36\x91\xf5\xe8\x82\xfa\x08\x4c\xf9\x69\x60\x23\x4f\xc6\xee\x99\x87\xfa\x3b\xd1\xc2\x7c\x21\x18\x0c\xc9\x58\x1b\x24\xe9\x24\x88\xc1\x4d\x92\x3d\xe2\x05\x00\xd7\x92\xbd\x20\xa6\xe7\x71\x9f\xd2\xda\x27\xa9\xee\xb1\x07\x71\x20\xc8\xe9\xb2\xcc\x51\xa6\xab\x85\x7f\xc1\x76\x77\x51\xdb\x4e\x6d\x51\xb7\x12\x5a\xbf\x1f\x82\x44\x7f\x49\x53\xd2\x84\xf9\x04\x40\x15\x18\xb8\x30\xb6\x10\xa9\x51\xd1\x1e\xcb\xf8\x64\xa1\x32\xbd\x4c\x1d\x61\x34\x0c\xe3\xd2\xf5\x2b\x4a\xee\x28\x19\x52\xa1\xc3\xbd\x76\x29\x07\x8c\x2f\xda\x67\xfd\x29\x06\x78\x28\x4a\x49\x04\x80\x6e\xd7\x0e\xfb\x83\x97\x30\xaf\x0e\x74\x8b\x4a\xa6\x68\x1b\xa1\x65\x85\x50\x44\x20\x3a\x75\x5a\x9f\xdf\x94\xa3\x34\x71\x6b\xc6\x77\x81\xcf\x22\x71\xd5\x35\x64\x91\x0d\x7e\x09\x2f\x4c\x41\x4e\xa0\x85\x3f\x2c\xc4\x11\x34\xba\xa0\xbc\x2c\x2d\xf2\xac\x4e\x7a\x2d\xe9\x67\x98\xa7\x3b\x3a\x55\x42\x96\xb9\x4f\x33\xa6\x7c\xa8\x3c\xd7\x6a\xdd\xee\x3f\x73\x5d\x91\x85\x14\xd8\xe4\xb5\x34\x02\x22\xcf\x33\x8e\x3a\xeb\x5f\xac\x5e\x78\xf0\x0a\xc0\x62\x5e\xf3\xe6\xb8\x7e\x01\x9a\x2f\x11\x77\x58\xe5\xf9\x08\x7a\xaa\xf6\x79\xe1\x0b\xbb\x1a\x59\x9b\x0d\x21\x0b\x02\xf1\xf2\xfc\x1b\x85\x61\x00\x7a\xa4\xb3\xa4\xd6\x03\x87\x95\xe3\x68\xd7\xad\x73\x24\xab\x76\x67\x6e\xef\xd7\xb1\xa6\xc2\xf9\x6a\xcf\x92\x33\xe1\xf7\x3c\x28\x59\x46\x4c\x2b\x54\xb4\xb0\x2a\xa4\x9d\x3e\xd4\xa0\x48\x19\x6c\x03\xc2\xc6\xe3\xa2\x8d\x5f\x8c\x26\x74\x28\x5f\x22\x47\xc4\x5c\x0e\x94\xfb\x24\x2e\xb4\x89\x26\x5d\xa6\xbc\x3f\xee\xb8\xf4\xb9\x29\x23\x86\xe1\x42\x5d\x8c\xa1\xca\x46\x3e\x99\x0b\xa8\xdb\x82\xd0\x04\xbe\x77\x1a\x98\xc4\x8f\x08\xe3\x84\x6b\x07\x84\x21\x8d\xfa\x00\xe3\x2e\x18\xe7\x5b\x6e\xa4\x2a\xb8\x24\xfa\x46\xae\x63\xa6\x46\xf7\x74\xea\xdf\x77\x39\xc3\x04\xca\x3b\xd9\xc3\x67\x42\x73\xed\x0b\x40\x54\x38\xd1\x11\xec\xf9\xb5\x52\x2f\xb2\x6a\x44\x22\x93\xc2\xc9\xdf\xa7\x1d\x35\xbf\x75\x3e\xbe\x8a\x1e\xc2\x51\xde\x70\xd6\xd7\x47\xa8\x9a\x48\x28\x9d\x6b\xb5\xc6\x5b\xc7\x06\x1f\x63\xb4\x63\x20\xa1\x06\x11\x5e\xad\x86\x22\x86\xcd\xfb\x2f\x61\x2c\x28\xd6\xe6\xfc\x6e\x1b\xf3\xc1\xed\xeb\x07\x73\x9f\x66\xa8\xec\x3c\x9c\x02\x53\x7a\x7b\x3a\x6f\x96\x6a\xb4\xca\xf7\x8b\x53\x95\x0c\x50\x3c\x41\xa1\xf1\x4d\xcb\x1b\x99\x34\x56\x6e\xa3\xf4\xb0\x88\xb0\x23\x50\x7a\x08\x79\xe7\x8e\x91\x97\xc3\x8c\xaf\xfc\x75\x60\x13\xcb\x7e\x78\x4b\x23\x6c\x6d\x9c\xf5\x3e\x9b\xe6\x46\x3e\x7b\x0f\x5c\x8a\x66\x97\xbb\x13\xf2\xd9\x7a\x4e\xf9\x70\xea\xb6\x8a\xc3\xcc\x24\x4f\x73\x28\x80\xd8\x54\x2b\xd0\xba\x2a\x3d\x9e\x19\x58\x3d\xe1\xa7\x92\xdf\x97\x39\x97\x59\x6d\x27\xde\x4f\x41\x5b\xed\x07\x88\xd1\xca\x4e\x53\x75\x7f\x19\x1f\xd6\x72\x4d\xbb\xcb\xc2\x1f\x38\x53\x25\x4e\xd7\xd4\x65\x83\xef\x08\x94\x47\xc7\xba\x90\xc0\xc4\x33\x0f\x89\xa6\xf3\xab\xd6\xa8\xa4\xc8\xb1\xa7\x7d\x4e\xfa\x0b\x2c\x89\xa2\x64\x19\xe3\xea\x22\x55\xc9\x14\x19\xda\xa0\x28\xeb\x2f\xdd\x4c\xd8\x15\xeb\x47\x4b\x28\xc9\x82\x29\xf3\xa3\x7f\xcb\xe6\x4d\x76\x47\xcd\x0f\xba\x2e\xf1\xf0\x4d\x06\x88\x0b\x4c\xa9\x00\xba\x98\x95\xe1\xb4\xd8\x46\xa2\x0c\xe6\xdc\x85\xd3\x19\x4e\xaa\xee\x20\x94\x8d\x70\xf9\x5d\xdd\x53\xca\x66\xa5\x4d\x81\x9a\x7f\x80\x39\x8e\x0f\x78\x26\x4c\xac\xce\x66\xae\x6c\x49\xf3\x19\x10\xca\x99\xed\xfd\x89\x15\x8d\x4b\xd1\xe6\x11\xbd\x1b\x1f\xac\x60\x1c\x57\x10\xaf\x3f\xc9\x83\xca\x6c\x54\x45\x0a\x2d\x50\x2a\xaa\xd6\xf9\xb6\xec\x53\xeb\x35\x62\x74\x18\x09\xd8\x15\x40\xa4\x06\x6a\x0f\xaf\x35\x46\x46\xf8\x6b\x70\xc5\x45\x21\xdf\x9f\xbb\x52\x5c\x3e\x5d\x79\x8b\xab\x76\xf2\x33\xcb\x79\x95\xf3\xb9\xdb\x57\x69\xe8\xb2\x8d\x59\x05\xab\x99\xeb\x5b\x0f\x59\x4e\xfd\x86\x98\x0e\x2c\xa5\xb8\xa4\x8b\x25\xf8\x9e\x9d\x3d\xa1\x51\xe6\xf4\xc0\xec\xc7\x41\x68\x5e\x75\x15\x47\xdb\xb8\x4d\x35\xa0\x7d\x8f\xfe\xec\xd7\xa4\xb9\x05\x3c\x16\x4a\x3f\x52\x6e\x9c\x1e\x57\xe3\xab\x70\x06\x2a\x98\x78\xa0\xad\xa6\x91\xed\x04\x1b\xf9\xb7\x70\xaf\xb1\x5f\x5f\xf1\x7d\x6f\x09\x2d\x20\x69\x9d\x26\xf9\xba\xa5\x13\xcb\x30\xee\xd7\x47\x23\x51\xe5\xcd\x5c\x65\xd0\x00\xb3\x49\xff\x9a\x03\x0f\x60\x57\x32\x3b\xb9\xa4\x6d\xb7\x94\x7d\x64\x8d\x7a\x1d\x14\x2d\x39\x41\x6e\x2c\x7c\x8e\xcc\x89\xbf\xb6\x05\x63\xf5\xd0\xa2\x0f\xba\xa4\xc7\x2e\x1c\x84\xf2\xcb\x64\x0a\x11\xf0\x64\x22\xbd\x5c\x00\x10\x2f\x2b\xb1\xb3\xca\xb1\x12\xdf\x0d\xc9\x58\xc0\x66\x1d\xc1\x0c\xf9\xe5\xd2\xf4\x49\xe0\x8f\x15\x2c\xd0\xe4\xe2\x8f\xe1\x15\x13\xa5\xd6\xe3\xd6\xa6\x42\x2b\x83\xe7\x3c\xd5\xbd\x2e\x99\xfb\x0c\x20\x34\xc2\x34\xca\xe7\x23\xdf\xb1\xb9\x4b\xa1\x54\x83\xb1\x6d\xa6\x64\xaa\x33\xdc\x45\xc5\xa9\xec\xeb\x8a\x16\x27\xc6\x3a\x72\x16\xc2\x87\x2d\xa5\x44\x2b\x7c\x9a\xfb\x93\x90\xe7\x1e\x41\xae\x0b\x84\x61\x43\x8d\xf3\xf9\x39\x60\xee\x38\x94\x85\x9e\x16\x51\x70\xdb\x20\xb4\x43\x4b\x86\x6d\x0b\xc4\xf9\x3c\xcd\xb0\x52\xcf\xe3\x9d\xcd\xa2\x4a\xb1\x3e\x85\x8c\xd3\x3e\xb2\x5e\x62\xe6\x18\xc8\x01\x84\xdf\x30\xd8\xf6\xc0\x5a\x99\xd4\x6f\x7a\x15\x4c\xa5\xe6\xaa\x78\x56\x96\x9d\x62\x3e\x3c\x0e\x91\xf8\x72\x15\x5e\x47\xe9\x8b\x33\x82\x12\xba\xaa\x33\x37\x54\x83\xcd\x97\x4d\xf0\x9a\x92\x18\x06\xe4\x8e\xae\x30\x3a\x2b\xb4\x33\x56\x61\x7c\x74\x66\x01\x76\x98\xf8\x63\xb4\x90\x8f\xe3\x0b\xe8\x89\x43\x17\x32\xbb\xac\x0d\xc9\xbb\x1a\xe8\x68\x8d\x43\xf1\xd4\xd1\x23\xbc\xbf\x16\x6c\x58\xcd\x01\xde\x74\x25\x0f\x36\x29\x5e\xeb\xaa\xa1\x50\x82\x3a\x72\xe6\x35\x1a\xfd\x44\xe8\x0b\x47\x97\xc8\x37\x8d\xc8\xb1\x5a\xf3\x41\xf5\x1c\x99\x4f\xcb\x30\x5d\x3a\x3a\x46\x64\x17\x69\xce\xee\x0f\x46\x00\xda\x20\x5a\x5e\x70\x93\x8e\x26\x3b\x52\x42\x78\x07\x66\x73\xe4\x00\x0b\x13\xb9\xcb\x32\x7a\x91\x45\x79\x31\x1c\x57\x47\x53\x87\x78\x0a\xb0\x6a\xf9\xa9\xc1\x2a\x67\x4f\x22\x78\x73\x42\x8f\x88\x01\x84\xea\xbe\xb9\x89\x6a\xa9\xd4\x7b\x8c\xa7\xf1\x3c\x4b\x17\x20\x88\xda\xd7\x9d\x05\x91\x56\xf8\x42\xd8\x2b\x32\x55\x2c\x03\xe1\x1a\xf9\x6b\x6b\x6c\x2c\x53\xb4\xf8\x7e\xbf\xd6\x9a\x89\x0f\x0f\x03\xde\x96\xea\xce\xa7\x24\x2b\xb8\x9a\xd2\xdd\x39\xd3\x61\xe2\xd3\x1f\x45\xa5\xb8\x6e\x91\x63\x48\xd8\x3b\x66\xbf\xab\x5c\x39\x38\x08\x96\xa1\xf9\x4e\x06\x8a\x9c\x39\x7a\x8d\x36\x79\x2b\x86\x07\x03\xe6\xf5\x21\x2f\xaa\x56\x93\xd4\x62\xed\x83\xef\x61\xd9\xac\xd2\xd7\x57\xb2\x80\xca\xd2\x67\x0f\xc3\xf6\xfb\x0d\xa2\x5c\xc9\x8e\xcf\xab\x79\xa4\xf6\x78\xd4\x53\x63\xe5\xd4\xf5\x4e\xed\x45\x4a\x05\xac\xc6\xa6\xab\x91\x95\x3f\xf1\xe7\x99\x17\x12\xa9\xad\x2c\xae\x2d\x5c\x6a\x0c\x73\x0c\x85\x97\xb7\x2c\xe1\x65\x36\x29\x81\x19\x6d\x44\xdc\x8f\x38\x83\xc2\x31\x51\xc2\x45\xfb\xdb\xff\x03\xff\x92\x43\xb4\x84\xff\x9d\x22\xff\x09\x00\x00\xff\xff\x14\x22\x96\x1d\xab\x0c\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 3243, mode: os.FileMode(436), modTime: time.Unix(1545400924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

